- hosts: localhost
  connection: local
  tasks:
    - add_host:
        name: "{{ item }}"
        groups: my_dynamic_group
      loop: "{{ groups.all|select('match', my_pattern)|list }}"
      vars:
        my_pattern: '^k8s-master\d+$'

- hosts: my_dynamic_group
  connection: lxd
  become: yes
  tasks:
    - debug:
        var: inventory_hostname

    - name: create the kube user account
      user: name=kube append=yes state=present createhome=yes shell=/bin/bash

    - name: allow 'kube' to use sudo without needing a password
      lineinfile:
        dest: /etc/sudoers
        line: 'kube ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: set up authorized keys for the kube user
      authorized_key: user=kube key="{{item}}"
      with_file:
        - ~/.ssh/id_rsa.pub


    - name: install containerd
      shell: |
               sudo apt update -qq && sudo apt install -qq -y containerd apt-transport-https curl 
               sudo mkdir -p /etc/containerd
               sudo containerd config default | sudo tee /etc/containerd/config.toml
               sudo systemctl restart containerd
               sudo systemctl enable containerd

    - name: disable swap
      shell: |
               sudo swapoff -a
               sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

    - name: install and configure dependencies gnupg
      become_method: sudo
      become_user: root
      shell: sudo apt install -y gnupg
                
              
    - name: install and configure dependencies
      become_method: sudo
      become_user: root
      shell: curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -


    - name: Create kubernetes repo file
      file:
        path: "/etc/apt/sources.list.d/kubernetes.list"
        state: "touch"

    - name: Add K8s Source
      blockinfile:
        path: "/etc/apt/sources.list.d/kubernetes.list"
        block: |
              deb https://apt.kubernetes.io/ kubernetes-xenial main

    - name: install kubernetes
      shell: |
              sudo apt-get update
              sudo apt-get install -y kubeadm=1.22.0-00 kubelet=1.22.0-00 kubectl=1.22.0-00
              sudo apt-mark hold kubelet kubeadm kubectl

    - name: disable swap for kubelet 
      shell: |
              echo 'KUBELET_EXTRA_ARGS="--fail-swap-on=false"' |sudo tee /etc/default/kubelet
              sudo  systemctl restart kubelet
              



    - name: Hack required to provision K8s v1.15+ in LXC containers
      shell: |
              sudo apt install -qq -y net-tools
              sudo mknod /dev/kmsg c 1 11
              echo 'mknod /dev/kmsg c 1 11' | sudo tee  /etc/rc.local
              sudo chmod +x /etc/rc.local
        
    - name: patch to shared mount propagation to run calico node 
      shell: sudo mount --make-rshared /

    - name: patch to create symlink for /dev/kmsg for kubelet proper functionality
      shell: |
              echo 'L /dev/kmsg - - - - /dev/console' > /etc/tmpfiles.d/kmsg.conf
   
    # - name: Create kubeadm-config.yaml
    #   file:
    #       path: "/tmp/kubeadm-config.yaml"
    #       state: touch
    #       mode: 0755
    #       owner: kube

    # - name: add  kubeadm-config.yaml file  content
    #   copy:
    #       force: yes
    #       dest: "/tmp/kubeadm-config.yaml"
    #       content: |
    #                 ---
    #                 apiVersion: kubeadm.k8s.io/v1beta2
    #                 kind: InitConfiguration
    #                 localAPIEndpoint:
    #                   # advertiseAddress: {{ ansible_eth0.ipv4.address }}                      
    #                   advertiseAddress: 0.0.0.0
    #                 ---
    #                 apiVersion: kubeadm.k8s.io/v1beta2
    #                 kind: ClusterConfiguration
    #                 kubernetesVersion: v1.21.0
    #                 networking:
    #                         podSubnet: "10.244.0.0/16" 
    #                 ---
    #                 apiVersion: kubelet.config.k8s.io/v1beta1
    #                 kind: KubeletConfiguration
    #                 cgroupDriver: systemd
    #                 serverTLSBootstrap: true 
    
    # - name: Copy config  to local file.
    #   become: False
    #   # become: yes
    #   fetch:
    #            src: "/tmp/kubeadm-config.yaml"
    #            dest: "./kubeadm-config.yaml"
    #            flat: yes

               


    - name: initialize the cluster
      # shell: kubeadm init  --pod-network-cidr=10.244.0.0/16
      shell: kubeadm init  --control-plane-endpoint={{ ansible_eth0.ipv4.address }} --pod-network-cidr="10.244.0.0/16" --ignore-preflight-errors=all --v=5
      args:
        chdir: $HOME
        creates: cluster_initialized.txt

    - name: create .kube directory
      become: yes
      become_user: kube
      file:
        path: $HOME/.kube
        state: directory
        mode: 0755

    - name: copies admin.conf to user's kube config
      become: yes
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/kube/.kube/config
        remote_src: yes
        owner: kube
        force: yes

    - name: patch kube-proxy config map  
      become: yes
      become_user: kube
      shell: |
               kubectl patch configmap kube-proxy -p '{"data": {"config.conf": "apiVersion: kubeproxy.config.k8s.io/v1alpha1\nbindAddress: 0.0.0.0\nbindAddressHardFail: false\nclientConnection:\n  acceptContentTypes: \"\"\n  burst: 0\n  contentType: \"\"\n  kubeconfig: /var/lib/kube-proxy/kubeconfig.conf\n  qps: 0\nclusterCIDR: 10.244.0.0/16\nconfigSyncPeriod: 0s\nconntrack:\n  maxPerCore: 0\n  min: null\n  tcpCloseWaitTimeout: null\n  tcpEstablishedTimeout: null\ndetectLocalMode: \"\"\nenableProfiling: false\nhealthzBindAddress: \"\"\nhostnameOverride: \"\"\niptables:\n  masqueradeAll: false\n  masqueradeBit: null\n  minSyncPeriod: 0s\n  syncPeriod: 0s\nipvs:\n  excludeCIDRs: null\n  minSyncPeriod: 0s\n  scheduler: \"\"\n  strictARP: false\n  syncPeriod: 0s\n  tcpFinTimeout: 0s\n  tcpTimeout: 0s\n  udpTimeout: 0s\nkind: KubeProxyConfiguration\nmetricsBindAddress: \"\"\nmode: \"\"\nnodePortAddresses: null\noomScoreAdj: null\nportRange: \"\"\nshowHiddenMetricsForVersion: \"\"\nudpIdleTimeout: 0s\nwinkernel:\n  enableDSR: false\n  networkName: \"\"\n  sourceVip: \"\""} }' -n kube-system




           
    - name: install Calico Pod network
      become: yes
      become_user: kube
      shell: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml 
      args:
        chdir: $HOME
        
    - name: Get the token for joining the worker nodes
      become: yes
      become_user: kube
      shell: kubeadm token create  --print-join-command
      register: kubernetes_join_command

    # - debug:
    #   msg: "{{ kubernetes_join_command.stdout}}"
    - name: Debug join command 
      debug:
        msg: "{{ kubernetes_join_command.stdout}}"
    - name: Debug hosttempfile_location 
      debug:
        msg: "{{hosttempfile_location}}"

    - name: copies admin.conf to local user's kube config
      ansible.builtin.fetch:
        src: /etc/kubernetes/admin.conf
        dest: ~/.kube/config
        remote_src: yes
        # owner: gk
        flat: yes


    - name: Copy join command to local file.
      become: False
      # become: yes
      local_action: copy content="{{ kubernetes_join_command.stdout_lines[0] }}"  dest="{{hosttempfile_location}}/kubernetes_join_command" mode=0777


